//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use anyhow::{Result, anyhow};
use schemars::JsonSchema;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use ts_rs::TS;

use crate::server_context::{get_db_connect, DB};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, TS)]
#[serde(rename_all = "camelCase")]
#[sea_orm(table_name = "app_config")]
#[ts(export, export_to = "AppConfigModel.ts")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub recording_status: RecordingStatus,
    #[serde(rename = "captureSSL")]
    pub capture_ssl: bool,
    #[ts(type = "Record<string, string> | null")]
    pub ssl_config: Option<Json>,
    pub max_log_size: i32,
    pub clear_log_size: i32,
}

#[derive(
    EnumIter, DeriveActiveEnum, Clone, Debug, PartialEq, Eq, Serialize, Deserialize, JsonSchema, TS,
)]
#[sea_orm(
    rs_type = "String",
    db_type = "String(StringLen::None)",
    rename_all = "camelCase"
)]
#[ts(export)]
pub enum RecordingStatus {
    StartRecording,
    PauseRecording,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

pub async fn get_app_config() -> Model {
    Entity::find()
        .one(get_db_connect())
        .await
        .expect("app config not found")
        .expect("app config not found")
}

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize, JsonSchema)]
#[serde(rename_all = "camelCase")]
pub struct SSLConfigRule {
    pub switch: bool,
    pub host: String,
    pub port: Option<u16>,
}

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize, JsonSchema)]
#[serde(rename_all = "camelCase")]
pub struct SSLConfig {
    pub include_domains: Vec<SSLConfigRule>,
    pub exclude_domains: Vec<SSLConfigRule>,
}

pub async fn get_enabled_ssl_config() -> Result<(Vec<SSLConfigRule>, Vec<SSLConfigRule>)> {
    let app_config = get_app_config().await;
    match app_config.ssl_config {
        None => Ok((vec![], vec![])),
        Some(ssl_config) => {
            let ssl_config: SSLConfig = serde_json::from_value(ssl_config)
                .map_err(|e| anyhow!(e).context("parse ssl config error"))?;
            let SSLConfig {
                include_domains,
                exclude_domains,
            } = ssl_config;
            let include = include_domains.into_iter().filter(|x| x.switch).collect();
            let exclude = exclude_domains.into_iter().filter(|x| x.switch).collect();
            Ok((include, exclude))
        }
    }
}

impl Model {
    pub fn is_recording(&self) -> bool {
        self.recording_status == RecordingStatus::StartRecording
    }
}
