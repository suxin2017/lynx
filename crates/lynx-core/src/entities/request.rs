//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
#[sea_orm(table_name = "request")]
// #[builder(pattern = "owned")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub uri: String,
    pub trace_id: String,
    pub method: String,
    pub schema: String,
    pub version: String,
    pub status_code: u16,
    pub header: Option<Json>,
    pub header_size: Option<u32>,
}



#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::response::Entity")]
    Response,
}

impl Related<super::response::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Response.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
