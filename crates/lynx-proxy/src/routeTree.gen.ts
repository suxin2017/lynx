/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as SettingIndexImport } from './routes/setting/index'
import { Route as RuleManagerIndexImport } from './routes/ruleManager/index'
import { Route as NetworkIndexImport } from './routes/network/index'
import { Route as HomeIndexImport } from './routes/home/index'
import { Route as CertificatesIndexImport } from './routes/certificates/index'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingIndexRoute = SettingIndexImport.update({
  id: '/setting/',
  path: '/setting/',
  getParentRoute: () => rootRoute,
} as any)

const RuleManagerIndexRoute = RuleManagerIndexImport.update({
  id: '/ruleManager/',
  path: '/ruleManager/',
  getParentRoute: () => rootRoute,
} as any)

const NetworkIndexRoute = NetworkIndexImport.update({
  id: '/network/',
  path: '/network/',
  getParentRoute: () => rootRoute,
} as any)

const HomeIndexRoute = HomeIndexImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => rootRoute,
} as any)

const CertificatesIndexRoute = CertificatesIndexImport.update({
  id: '/certificates/',
  path: '/certificates/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/certificates/': {
      id: '/certificates/'
      path: '/certificates'
      fullPath: '/certificates'
      preLoaderRoute: typeof CertificatesIndexImport
      parentRoute: typeof rootRoute
    }
    '/home/': {
      id: '/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeIndexImport
      parentRoute: typeof rootRoute
    }
    '/network/': {
      id: '/network/'
      path: '/network'
      fullPath: '/network'
      preLoaderRoute: typeof NetworkIndexImport
      parentRoute: typeof rootRoute
    }
    '/ruleManager/': {
      id: '/ruleManager/'
      path: '/ruleManager'
      fullPath: '/ruleManager'
      preLoaderRoute: typeof RuleManagerIndexImport
      parentRoute: typeof rootRoute
    }
    '/setting/': {
      id: '/setting/'
      path: '/setting'
      fullPath: '/setting'
      preLoaderRoute: typeof SettingIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/certificates': typeof CertificatesIndexRoute
  '/home': typeof HomeIndexRoute
  '/network': typeof NetworkIndexRoute
  '/ruleManager': typeof RuleManagerIndexRoute
  '/setting': typeof SettingIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/certificates': typeof CertificatesIndexRoute
  '/home': typeof HomeIndexRoute
  '/network': typeof NetworkIndexRoute
  '/ruleManager': typeof RuleManagerIndexRoute
  '/setting': typeof SettingIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/certificates/': typeof CertificatesIndexRoute
  '/home/': typeof HomeIndexRoute
  '/network/': typeof NetworkIndexRoute
  '/ruleManager/': typeof RuleManagerIndexRoute
  '/setting/': typeof SettingIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/certificates'
    | '/home'
    | '/network'
    | '/ruleManager'
    | '/setting'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/certificates'
    | '/home'
    | '/network'
    | '/ruleManager'
    | '/setting'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/certificates/'
    | '/home/'
    | '/network/'
    | '/ruleManager/'
    | '/setting/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  CertificatesIndexRoute: typeof CertificatesIndexRoute
  HomeIndexRoute: typeof HomeIndexRoute
  NetworkIndexRoute: typeof NetworkIndexRoute
  RuleManagerIndexRoute: typeof RuleManagerIndexRoute
  SettingIndexRoute: typeof SettingIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  CertificatesIndexRoute: CertificatesIndexRoute,
  HomeIndexRoute: HomeIndexRoute,
  NetworkIndexRoute: NetworkIndexRoute,
  RuleManagerIndexRoute: RuleManagerIndexRoute,
  SettingIndexRoute: SettingIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/certificates/",
        "/home/",
        "/network/",
        "/ruleManager/",
        "/setting/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/certificates/": {
      "filePath": "certificates/index.tsx"
    },
    "/home/": {
      "filePath": "home/index.tsx"
    },
    "/network/": {
      "filePath": "network/index.tsx"
    },
    "/ruleManager/": {
      "filePath": "ruleManager/index.tsx"
    },
    "/setting/": {
      "filePath": "setting/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
