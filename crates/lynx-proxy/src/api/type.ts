/*
 Generated by typeshare 1.13.2
*/

export enum ResponseCode {
	Ok = "Ok",
	ValidateError = "ValidateError",
	OperationError = "OperationError",
	InternalServerError = "InternalServerError",
}

export interface ResponseBox<T> {
	code: ResponseCode;
	message?: string;
	data?: T;
}

export type DeleteRuleBody = ResponseBox<undefined>;

export enum CaptureType {
	Glob = "glob",
	Regex = "regex",
}

export interface Capture {
	type: CaptureType;
	url: string;
}

export type Handler = 
	| { type: "connectPassProxyHandler", data: ConnectPassProxyHandler };

export interface RuleContent {
	capture?: Capture;
	handlers: Handler[];
}

export type RuleDetailBody = ResponseBox<RuleContent>;

export type UpdateRuleContentBody = ResponseBox<undefined>;

export interface AddRuleParams {
	ruleGroupId: number;
	name: string;
}

export interface ConnectPassProxyHandler {
	switch: boolean;
	url: string;
}

export interface DeleteRuleParams {
	id: number;
}

export interface RuleUpdateContentParams {
	id: number;
	capture: Capture;
	handlers: Handler[];
}

export interface UpdateRuleNameParams {
	id: number;
	name?: string;
}

export interface ValidateError {
	message: string;
}

